"""
Script to get Abaqus jobs (.inp) submitted sequentially

- Place script in a dedicated folder
- Add an abaqus_v6.env in the folder to define default settings for memory and cpus/cores

- Run script in that folder (cmd: abaqus python scriptname)
- An automatically generated file named abq_queue_running.txt shows that the script is running
- The script checks regularly regarding the files in the folder
	- Sleep time is the pause between each check
- Every .inp in that folder is submitted one after another
- A .inp is not submitted when a .log file with the same name exists
- Script is not submitting a .inp while a job is running
	- The exitance of a .lck file indicates that a job is running
- Input files named *_f.inp are ignored
	- Flatted input files that may be generated by Abaqus

- Add a file named terminate.txt into the folder to terminate the current job
- Add a file named end.txt into the folder to end the script
	- A currently running job will continue to run
	- Use command line to terminate it if needed (cmd: abaqus j=jobname terminate)

"""
##############################################################
##############################################################

from __future__ import print_function
import os
from time import sleep

##############################################################
# Sleep time between checks (in second)

sleep_time = 30

##############################################################

def get_inputs():
	"""Check folder to find valid .inp files"""

	files = os.listdir(os.getcwd())
	inps = [x for x in files if x[-4:] == '.inp']
	inps = [x for x in inps if x[-6:] != '_f.inp']
	

	xinps = []
	for name in inps:
		logname = name.replace('.inp', '.log')
		if logname not in files:
			xinps.append(name)

	if len(xinps) > 0:
		xname = xinps[0][:-4]
	else:
		xname = False
	
	return(xname)

##############################################################

def run(jobname):
	"""Submit new job"""
	
	if 'terminate.txt' in os.listdir(os.getcwd()):
		os.remove('terminate.txt')
	
	print('Starting: '+jobname)
	os.popen('abaqus job='+jobname)

##############################################################

def check_running():
	"""Check if .lck file is found in folder"""

	running = False
	for name in os.listdir(os.getcwd()):
		if name[-4:] == '.lck':
			running = True
			break

	return(running)

##############################################################

def check_abort_queue():
	"""Check if end.txt is found in folder"""

	if 'end.txt' in os.listdir(os.getcwd()):
		print('End.txt found')
		return(True)
	else:			
		return(False)

##############################################################

def check_terminate(jobname):
	"""Check for terminate.txt in folder and abort current job is found"""

	if 'terminate.txt' in os.listdir(os.getcwd()):
		print('terminate.txt found. Ending Abaqus job: '+jobname)
		os.popen('abaqus j='+jobname+' terminate')
		sleep(20)

##############################################################
##############################################################

if __name__ == '__main__':

	print('Started Queue-Script...')

	try:
		os.remove('abq_queue_running.txt')
		os.remove('end.txt')
		os.remove('terminate.txt')
	except:
		pass

	with open('abq_queue_running.txt', 'w') as f:
		print('Queue-Script is running. Generate file named end.txt to end script.', file=f)

	
	########################################
	# main loop
	
	end = False

	while end == False:
		
		is_running = check_running()
		if is_running == True:
			check_terminate(jobname)
			is_running = check_running()
		
		end = check_abort_queue()
		if is_running == False and end == False:
			jobname = get_inputs()
			if jobname != False:
				run(jobname)

		if end == False:
			sleep(sleep_time)
			#print('sleep '+str(sleep_time))

	########################################

	# Deleting txt files
	try:
		os.remove('abq_queue_running.txt')
		os.remove('end.txt')
		os.remove('terminate.txt')
	except:
		pass

	print('Ending script...')